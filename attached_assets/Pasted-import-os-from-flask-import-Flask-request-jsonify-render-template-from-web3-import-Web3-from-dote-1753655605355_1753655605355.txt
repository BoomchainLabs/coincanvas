import os
from flask import Flask, request, jsonify, render_template
from web3 import Web3
from dotenv import load_dotenv
from datetime import datetime
import threading

# Load .env variables
load_dotenv()

# Flask app instance
app = Flask(__name__)

# Tenderly RPC endpoint (Base chain)
TENDERLY_RPC = os.getenv("TENDERLY_RPC", "https://base.gateway.tenderly.co/1cAI6rLkKToMdpKceTtTAe")
w3 = Web3(Web3.HTTPProvider(TENDERLY_RPC))

# Receiving address (ERC-20/ETH)
RECEIVER = Web3.to_checksum_address("0xeb5b687eb21dd4c7ae9d43b7d641f0d9e79d520d")

# In-memory ledger to track eligible addresses
ledger = []

@app.route('/')
def index():
    return render_template("index.html")  # Must be placed in ./templates/index.html

@app.route('/claim', methods=['POST'])
def claim():
    data = request.json
    address = data.get("address")

    if not Web3.is_address(address):
        return jsonify({"error": "Invalid address"}), 400

    address = Web3.to_checksum_address(address)
    matched = [tx for tx in ledger if tx['from'] == address]

    if not matched:
        return jsonify({"error": "No deposit record found"}), 404

    reward = sum([float(tx["value"]) for tx in matched])
    return jsonify({
        "message": "Eligible for reward",
        "wallet": address,
        "total_deposit_eth": reward,
        "status": "claimable"
    })

@app.route("/tx/simulate", methods=["POST"])
def simulate():
    try:
        data = request.get_json()
        tx = {
            "from": Web3.to_checksum_address(data["from"]),
            "to": Web3.to_checksum_address(data["to"]),
            "data": data["data"],
            "value": int(data.get("value", "0"), 16),
            "gas": int(data.get("gas", "0x5208"), 16),
            "gasPrice": int(data.get("gasPrice", "0x3b9aca00"), 16)
        }
        result = w3.eth.call(tx)
        return jsonify({"success": True, "result": result.hex()})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 400

def monitor_deposits():
    print("üîç Monitoring on Tenderly RPC...")
    block = w3.eth.block_number

    while True:
        try:
            latest = w3.eth.block_number
            for b in range(block, latest + 1):
                blk = w3.eth.get_block(b, full_transactions=True)
                for tx in blk.transactions:
                    if tx.to and tx.to.lower() == RECEIVER.lower():
                        tx_hash = tx.hash.hex()
                        from_addr = tx['from']
                        value = w3.from_wei(tx.value, 'ether')

                        if tx_hash not in [t["hash"] for t in ledger]:
                            ledger.append({
                                "hash": tx_hash,
                                "from": from_addr,
                                "value": float(value),
                                "timestamp": datetime.now().isoformat()
                            })
                            print(f"üí∞ Received {value} ETH from {from_addr}")
            block = latest + 1
        except Exception as e:
            print(f"[ERROR] {e}")

# Run monitor in background thread
threading.Thread(target=monitor_deposits, daemon=True).start()

# Start server
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)