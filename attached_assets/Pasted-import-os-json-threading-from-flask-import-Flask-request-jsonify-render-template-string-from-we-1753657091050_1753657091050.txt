import os, json, threading
from flask import Flask, request, jsonify, render_template_string
from web3 import Web3
from datetime import datetime
import merkletools

# Configure
app = Flask(__name__)
TENDERLY_RPC = os.getenv("TENDERLY_RPC")
w3 = Web3(Web3.HTTPProvider(TENDERLY_RPC))
RECEIVER = Web3.to_checksum_address(os.getenv("RECEIVER"))
ERC20_ADDRESS = os.getenv("ERC20_ADDRESS")  # set to token contract or omit
if ERC20_ADDRESS:
    ERC20_ADDRESS = Web3.to_checksum_address(ERC20_ADDRESS)
    TRANSFER_SIG = w3.keccak(text="Transfer(address,address,uint256)").hex()

ledger = []
ledger_lock = threading.Lock()
LEDGER_FILE = 'ledger.json'

# Load/save ledger
def load_ledger():
    global ledger
    try: ledger = json.load(open(LEDGER_FILE))
    except: ledger = []
load_ledger()

def save_ledger():
    with ledger_lock:
        with open(LEDGER_FILE, 'w') as f: json.dump(ledger, f)

# Build Merkle tree
def build_tree(entries):
    mt = merkletools.MerkleTools(hash_type="sha256")
    for e in entries: mt.add_leaf(e, do_hash=True)
    mt.make_tree()
    return mt

# HTML/JS   
@app.route('/')
def index():
    return render_template_string("""
<!DOCTYPE html><html><head><title>CoinCanvas Claim</title><style>
body{font-family:Arial;text-align:center;padding:40px;background:#f4f4f4}
.card{background:#fff;display:inline-block;padding:30px;border-radius:8px;box-shadow:0 0 10px rgba(0,0,0,.1)}
button{padding:10px 20px;margin:10px;font-weight:bold}
.hidden{display:none}
pre{background:#eee;text-align:left;padding:10px;border-radius:6px}
</style></head><body>
<div class="card">
  <h2>Claim Your Reward</h2>
  <button id="connectBtn">ðŸ”— Connect MetaMask</button>
  <div id="userUI" class="hidden">
    <p>Wallet: <span id="addr"></span></p>
    <button id="checkBtn">Check Eligibility</button>
    <pre id="result"></pre>
    <button id="claimBtn" class="hidden">Claim Now</button>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.min.js"></script>
<script>
const CONTRACT_ADDRESS = "{{ os.getenv('CONTRACT_ADDRESS') }}";
const CONTRACT_ABI = ["function claim(bytes32[] proof, uint256 value) external"];
let provider, signer, address, claimData, contract;
document.getElementById('connectBtn').onclick = async ()=>{
  if(!window.ethereum) return alert("Install MetaMask");
  provider=new ethers.providers.Web3Provider(window.ethereum);
  await provider.send("eth_requestAccounts",[]);
  signer=provider.getSigner();
  address=await signer.getAddress();
  document.getElementById('addr').innerText=address;
  document.getElementById('userUI').classList.remove('hidden');
  contract=new ethers.Contract(CONTRACT_ADDRESS,CONTRACT_ABI,signer);
};
document.getElementById('checkBtn').onclick = async ()=>{
  const r=await fetch('/claim',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({address})});
  const d=await r.json();
  document.getElementById('result').innerText=JSON.stringify(d,null,2);
  if(r.ok){ claimData=d; document.getElementById('claimBtn').classList.remove('hidden'); }
};
document.getElementById('claimBtn').onclick = async ()=>{
  const proof = claimData.proof;
  const value = ethers.utils.parseEther(claimData.total.toString());
  let tx = await contract.claim(proof, value);
  document.getElementById('result').innerText = "Waiting for confirmation...";
  await tx.wait();
  document.getElementById('result').innerText = "Claimed! Tx: " + tx.hash;
  document.getElementById('claimBtn').classList.add('hidden');
};
</script></body></html>""", os=os)

# claim endpoint
@app.route('/claim', methods=['POST'])
def claim():
    data = request.get_json() or {}
    addr = data.get("address","")
    if not Web3.is_address(addr): return jsonify(error="Invalid"),400
    addr = Web3.to_checksum_address(addr)
    with ledger_lock:
        matched = [t for t in ledger if t['from']==addr]
    if not matched: return jsonify(error="No records"),404
    entries = [f"{t['from']}:{t['value']}" for t in matched]
    mt = build_tree(entries)
    root = mt.get_merkle_root()
    proofs = [mt.get_proof(idx) for idx,_ in enumerate(entries)]
    idx = entries.index(f"{addr}:{matched[0]['value']}")
    proof = proofs[idx]
    total = sum(t['value'] for t in matched)
    return jsonify(wallet=addr, total=total, root=root, proof=proof)

# Monitor deposits ETH + ERC20
def monitor():
    block = w3.eth.block_number
    while True:
        latest = w3.eth.block_number
        for b in range(block, latest+1):
            blk = w3.eth.get_block(b, full_transactions=True)
            for tx in blk.transactions:
                if tx.to and tx.to.lower()==RECEIVER.lower():
                    txh = tx.hash.hex(); val=w3.from_wei(tx.value,'ether')
                    with ledger_lock:
                        if txh not in [t['hash'] for t in ledger]:
                            ledger.append({"hash":txh,"from":tx['from'],"value":float(val),"timestamp":datetime.now().isoformat(),"erc20":False})
                            save_ledger()
            if ERC20_ADDRESS:
                logs = w3.eth.get_logs({"fromBlock":b,"toBlock":b,"address":ERC20_ADDRESS,"topics":[TRANSFER_SIG,None,Web3.to_hex(RECEIVER)]})
                for log in logs:
                    from_addr="0x"+log['topics'][1].hex()[-40:]
                    val=w3.from_wei(int(log['data'],16),'ether')
                    txh = log['transactionHash'].hex()
                    with ledger_lock:
                        if txh not in [t['hash'] for t in ledger]:
                            ledger.append({"hash":txh,"from":from_addr,"value":float(val),"timestamp":datetime.now().isoformat(),"erc20":True})
                            save_ledger()
            block = latest+1

threading.Thread(target=monitor, daemon=True).start()

if __name__=='__main__':
    app.run(host='0.0.0.0', port=int(os.getenv("PORT",8080)))